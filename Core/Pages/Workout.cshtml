@page
@model Core.Pages.WorkoutModel
@{
    ViewData["Title"] = "Workout";
    int setTime = (Model.Workout.SetDuration * Model.Workout.NumberOfSets) + (Model.Workout.RestDuration * (Model.Workout.NumberOfSets - 1));
    string totalHours = $"{Math.Floor((decimal)(setTime % (60 * 60 * 24)) / (60 * 60))}h";
    string totalMinutes = $"{Math.Floor((decimal)(setTime % (60 * 60)) / 60)}m";
    string totalSeconds = $"{Math.Floor((decimal)(setTime % 60))}s";

    string setHours = $"{Math.Floor((decimal)(Model.Workout.SetDuration % (60 * 60 * 24)) / (60 * 60))}h";
    string setMinutes = $"{Math.Floor((decimal)(Model.Workout.SetDuration % (60 * 60)) / 60)}m";
    string setSeconds = $"{Math.Floor((decimal)(Model.Workout.SetDuration % 60))}s";
}

<div class="text-center">
    <div class="border-bottom">
        <h1 class="display-3">Core Workout</h1>
        <button type="button" id="Start" class="btn btn-success btn-lg rounded-circle mb-2 mr-2"><i class="fa fa-play"></i></button>
        <button type="button" id="Pause" class="btn btn-primary btn-lg rounded-circle mb-2 d-none mr-2"><i class="fa fa-pause"></i></button>
        <button type="button" id="Restart" class="btn btn-warning btn-lg rounded-circle mb-2 d-none ml-2"><i class="fa fa-undo"></i></button>
    </div>

    <div class="row">
        <div class=" col-6">
            <div class="row">
                <div class="col-6">
                    <h1 id="OverallTimeText" class="text-right">Overall Time:</h1>
                </div>
                <div class="col-6">
                    <h1 id="OverallTimer" class="text-left">@totalHours @totalMinutes @totalSeconds</h1>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <h1 id="SetTimeText" class="text-right">Set Time:</h1>
                </div>
                <div class="col-6">
                    <h1 id="SetTimer" class="text-left">@setHours @setMinutes @setSeconds</h1>
                </div>
            </div>
        </div>
        <div class=" col-6">
            <ol class="h2">
                @foreach (var set in Model.SetList)
                {
                    <li class="text-left">@set</li>
                }
            </ol>
        </div>
    </div>
</div>
<script src="lib/easytimer/dist/easytimer.min.js"></script>
<script>
    $(document).ready(function () {
        $('#Start').on('click', function () {
            $('#Start').addClass('d-none');
            $('#Pause').removeClass('d-none');
            $('#Restart').removeClass('d-none');
            overallTimer.start();
            setTimer.start();
        });

        $('#Pause').on('click', function () {
            $('#Start').removeClass('d-none');
            $('#Pause').addClass('d-none');
            overallTimer.pause();
            setTimer.pause();
        });

        $('#Restart').on('click', function () {
            $('#Start').removeClass('d-none');
            $('#Pause').addClass('d-none');
            $('#Restart').addClass('d-none');
            overallTimer.reset();
            setTimer.reset();
            overallTimer.pause();
            setTimer.pause();
        });
    });

    var setDuration = @Model.Workout.SetDuration;
    var restDuration = @Model.Workout.RestDuration;
    var numberOfSets = @Model.Workout.NumberOfSets;
    var setCounter = numberOfSets;
    var totalTime = (setDuration * numberOfSets) + (restDuration * (numberOfSets - 1));
    var overallTimer = new easytimer.Timer();
    var setTimer = new easytimer.Timer();
    var restTimer = new easytimer.Timer();
    var countdownSound = new Audio('https://www.fesliyanstudios.com/play-mp3/7032');

    overallTimer.start({ countdown: true, startValues: { seconds: totalTime }, target: { seconds: 0 } });
    overallTimer.pause();

    setTimer.start({ countdown: true, startValues: { seconds: setDuration }, target: { seconds: 0 } });
    setTimer.pause();

    restTimer.start({ countdown: true, startValues: { seconds: restDuration }, target: { seconds: 0 } });
    restTimer.pause();

    overallTimer.addEventListener('secondsUpdated', function (e) {
        displayTimers(overallTimer, '#OverallTimer');
    });

    overallTimer.addEventListener('started', function (e) {
        displayTimers(overallTimer, '#OverallTimer');
    });

    overallTimer.addEventListener('reset', function (e) {
        displayTimers(overallTimer, '#OverallTimer');
        setCounter = numberOfSets
    });

    setTimer.addEventListener('secondsUpdated', function (e) {
        displayTimers(setTimer, '#SetTimer');
        playCountdownAudio(setTimer);
    });

    setTimer.addEventListener('started', function (e) {
        displayTimers(setTimer, '#SetTimer');
    });

    setTimer.addEventListener('reset', function (e) {
        displayTimers(setTimer, '#SetTimer');
    });

    setTimer.addEventListener('targetAchieved', function (e) {
        setCounter--;

        if (setCounter > 0) {
            setTimer.stop();
            if (restDuration > 0) {
                restTimer.start({ countdown: true, startValues: { seconds: restDuration }, target: { seconds: 0 } });
                $('#SetTimeText').html('Rest Time:')
            } else {
                setTimer.start({ countdown: true, startValues: { seconds: setDuration }, target: { seconds: 0 } });
            }
        }
    });

    restTimer.addEventListener('secondsUpdated', function (e) {
        displayTimers(restTimer, '#SetTimer');
        playCountdownAudio(restTimer);
    });

    restTimer.addEventListener('started', function (e) {
        displayTimers(restTimer, '#SetTimer');
    });

    restTimer.addEventListener('reset', function (e) {
        displayTimers(restTimer, '#SetTimer');
    });

    restTimer.addEventListener('targetAchieved', function (e) {
        if (setCounter > 0) {
            restTimer.stop();
            setTimer.start({ countdown: true, startValues: { seconds: setDuration }, target: { seconds: 0 } });
            $('#SetTimeText').html('Set Time:')
        }
    });

    function displayTimers(timer, timerDisplay) {
        var hours = timer.getTimeValues().hours + 'h ';
        var minutes = timer.getTimeValues().minutes + 'm ';
        var seconds = timer.getTimeValues().seconds + 's';
        $(timerDisplay).html(hours + minutes + seconds);
    }

    function playCountdownAudio(timer) {
        // Countdown sound for last 3 seconds
        if (timer.getTimeValues().seconds <= 3 && timer.getTimeValues().seconds > 0) {
            countdownSound.playbackRate = 1;
            countdownSound.play();
            setTimeout(function () {
                countdownSound.pause();
                countdownSound.currentTime = 0;
            }, 500);
        }
        else if (timer.getTimeValues().seconds === 0) {
            countdownSound.playbackRate = .5;
            countdownSound.play();
            setTimeout(function () {
                countdownSound.pause();
                countdownSound.currentTime = 0;
            }, 500);
        }
    }
</script>